<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Runtime\Internal;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\Factory;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use Composer\Script\ScriptEvents;
use Symfony\Component\Filesystem\Filesystem;

/**
 * @author Nicolas Grekas <p@tchwork.com>
 *
 * @internal
 */
class ComposerPlugin implements PluginInterface, EventSubscriberInterface
{
    /**
     * @var Composer
     */
    private $composer;

    /**
     * @var IOInterface
     */
    private $io;

    private static $activated = false;

    public function activate(Composer $composer, IOInterface $io)
    {
        self::$activated = true;
        $this->composer = $composer;
        $this->io = $io;
    }

    public function deactivate(Composer $composer, IOInterface $io)
    {
        self::$activated = false;
    }

    public function uninstall(Composer $composer, IOInterface $io)
    {
        @unlink($composer->getConfig()->get('vendor-dir').'/autoload_runtime.php');
    }

    public function updateAutoloadFile()
    {
        $vendorDir = $this->composer->getConfig()->get('vendor-dir');
        $autoloadFile = $vendorDir.'/autoload.php';

        if (!file_exists($autoloadFile)) {
            return;
        }

        $projectDir = (new Filesystem())->makePathRelative(\dirname(realpath(Factory::getComposerFile())), $vendorDir);
        $nestingLevel = 0;

        while (0 === strpos($projectDir, '../')) {
            ++$nestingLevel;
            $projectDir = substr($projectDir, 3);
        }

        if (!$nestingLevel) {
            $projectDir = '__DIR__.'.var_export('/'.$projectDir, true);
        } else {
            $projectDir = "dirname(__DIR__, $nestingLevel)".('' !== $projectDir ? var_export('/'.$projectDir, true) : '');
        }

        $code = <<<'EOPHP'
<?php

// autoload.php @generated by Symfony Runtime

use Symfony\Component\Runtime\SymfonyRuntime;

if (true === (require_once __DIR__.'/autoload.php') || empty($_SERVER['SCRIPT_FILENAME'])) {
    return;
}

if (!($app = require $_SERVER['SCRIPT_FILENAME']) instanceof Closure) {
    throw \TypeError(sprintf('Invalid return value: \Closure expected, "%s" returned from "%s".', get_debug_type($app), $_SERVER['SCRIPT_FILENAME']));
}

$runtime = $_SERVER['APP_RUNTIME'] ?? SymfonyRuntime::class;
$runtime = new $runtime(($_SERVER['APP_RUNTIME_OPTIONS'] ?? []) + ['project_dir' => %project_dir%]);
$app = $runtime->resolve($app)();
exit($runtime->start($app)());

EOPHP;

        file_put_contents(substr_replace($autoloadFile, '_runtime', -4, 0), strtr($code, [
            '%project_dir%' => $projectDir,
        ]));
    }

    public static function getSubscribedEvents(): array
    {
        if (!self::$activated) {
            return [];
        }

        return [
            ScriptEvents::POST_AUTOLOAD_DUMP => 'updateAutoloadFile',
        ];
    }
}
